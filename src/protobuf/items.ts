// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "items.proto" (package "snazzy.items", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * A snazzy new shirt!
 *
 * @generated from protobuf message snazzy.items.Shirt
 */
export interface Shirt {
    /**
     * The base color
     *
     * @generated from protobuf field: string color = 1;
     */
    color: string;
    /**
     * The size as stated on the label
     *
     * @generated from protobuf field: snazzy.items.Shirt.Size size = 2;
     */
    size: Shirt_Size;
}
/**
 * Label sizes
 *
 * @generated from protobuf enum snazzy.items.Shirt.Size
 */
export enum Shirt_Size {
    /**
     * @generated from protobuf enum value: SMALL = 0;
     */
    SMALL = 0,
    /**
     * @generated from protobuf enum value: MEDIUM = 1;
     */
    MEDIUM = 1,
    /**
     * @generated from protobuf enum value: LARGE = 2;
     */
    LARGE = 2
}
// @generated message type with reflection information, may provide speed optimized methods
class Shirt$Type extends MessageType<Shirt> {
    constructor() {
        super("snazzy.items.Shirt", [
            { no: 1, name: "color", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "size", kind: "enum", T: () => ["snazzy.items.Shirt.Size", Shirt_Size] }
        ]);
    }
    create(value?: PartialMessage<Shirt>): Shirt {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.color = "";
        message.size = 0;
        if (value !== undefined)
            reflectionMergePartial<Shirt>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Shirt): Shirt {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string color */ 1:
                    message.color = reader.string();
                    break;
                case /* snazzy.items.Shirt.Size size */ 2:
                    message.size = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Shirt, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string color = 1; */
        if (message.color !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.color);
        /* snazzy.items.Shirt.Size size = 2; */
        if (message.size !== 0)
            writer.tag(2, WireType.Varint).int32(message.size);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message snazzy.items.Shirt
 */
export const Shirt = new Shirt$Type();
